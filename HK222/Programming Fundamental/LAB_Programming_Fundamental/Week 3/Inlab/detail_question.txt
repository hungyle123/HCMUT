--------------------------------------------Linked_List-----------------------------------------------
*** Bai 1:

Write a program where:
- struct node: represents a node in linkedlists
- functions createLinkedList:
    + Receive the size of a linked list (>0)
    + create a linked list with value from standard input (stdin) a new node is add to the  END  of the linked list
    + Return a pointer which points to the first node of the linked list.
- Function main reads the size of the linked list, calls function createLinkedList to Initialize the linked list, then call function print to print the linked list.
Complete function createLinkedList
Input:
size n of the linked list(0 < n < 5000)
following n numbers are values of each node in the linked list each number is an integers in (-5000; 5000)
Input:
Satisfy the requirements


*** Bai 2:

English version
Write a program where:
- struct node: represents a node in linkedlists
- functions createLinkedList:
    + Receive the size of a linked list (>0)
    + create a linked list with value from standard input (stdin) a new node is add to the  END  of the linked list
    + Return a pointer which points to the first node of the linked list.
- Function insertNode
    + receive the linked list's head pointers, a pointer of a new nodei, the position
    + The function will insert the new node to the input position(head's position is 1). If position <=0, do nothing. If position is greater than the size of the linked list, insert to the end of the linked list.
- function main reads the size of the linked list, calls function createLinkedList to initialize the linked list, then call function print to print the linked list.
Complete functions insertNode
Input: 
Value from standards input (stdin) with value in (0; 5000)



*** Bai 3:

English version
Write a program where:
- struct node: represents a node in linkedlists
- functions createLinkedList:
    + Receive the size of a linked list (>0)
    + create a linked list with value from standard input (stdin) a new node is add to the  END  of the linked list
    + Return a pointer which points to the first node of the linked list.
- Function replace:
    + receive the head pointer of the linked list
    + position that needed to be replaced (count from 0)
    + new Value
    + function replace will replace the value at input position to the new Value. If position is equal or greater than the size of the linked list or negative, do nothing.
- Function main reads the linked list's size, calls function createLinkedList to initialize the linked list, then calls function print to print the linked list.
Complete functions replace
Input:
All the input from standard input (stdin) with value in (0, 5000). Except position can be negative
Output:
Satisfy the requirements



*** Bai 4:

English version
Write a program where:
- struct node: represents a node in linkedlists
- functions createLinkedList:
    + Receive the size of a linked list (>0)
    + create a linked list with value from standard input (stdin) a new node is add to the  END  of the linked list
    + Return a pointer which points to the first node of the linked list.
- function searchLinkedList: 
    + receive the linked list's head pointer
    + The searching Value
    + If found, return the first position the value appeared in the Linked List (index start from 0), otherwise -1.
- function main read the linked list's size, calls function createLinkedList to initialize the linked list, then calls function print to print the linked list.
Complete functions searchLinkedList
Input:
All the input from standard input (stdin) with value in (0; 5000)


---------------------------------------------OOP----------------------------------------------------

*** Bai 1:
[English]

Given class template Array as below that contains an array allocated in Heap memory.
template <typename T>
class Array {
public:
    Array(int size, T initValue);
    ~Array();
private:
    int size;
    T * p;
};
There are 2 attributes in class Array:
p: a pointer contains the address of first element of allocated memory.
size: number of elements of array.
Requirement: Implement following 2 method:
Method Array(int size, T initValue): constructor, assigns size to the number of elements of the array; initializes a 1-dimensional array in the heap and stores the address of the first element of the array in the variable p.
Method ~Array(): destructor, recovers the allocated Heap memory.
Also, declare the print() method for the class Array (don't define the method).


*** Bai 2:

[English]
Given the class ClockType as following:
class ClockType
{
   public:
      void printTime() const;
      void incrementSeconds();
      void incrementMinutes();
      void incrementHours();
      clockType(int, int, int);
      clockType();
   private:
      int hr;
      int min;
      int sec;
};

Consider the statement:
myClock.incrementSeconds();
This statement increments the variable sec by 1 unit.
Let's implement 3 methods
incrementHours: increase hr by 1 unit. After incrementing, if hr = 24 then we reset hr = 0.
incrementMinutes: increase min by 1 unit. After increment, if min = 60 then we reset min = 0 and increase hr by 1 unit accordingly.
incrementSeconds: Increases sec by 1 unit. After increment, if sec = 60 then we reset sec = 0 and increase min by 1 unit accordingly.


*** Bai 3:
[English]

Implement following requirements:
Define class Integer that contains one attribute named val of type int.
Implement constructor: Integer(int): assign value of parameter to attribute val.
Implement constructor: Integer(Integer*).
Overload operator + so that: Integer(2) + Integer(3) returns Integer(5).
Overload operator + so that: Integer(3) + 2 returns Integer(5).
Note: declare method print() in class's definition and do not provide its implementation.


*** Bai 4:
[English]

Given class template Array as below that contains an array allocated in Heap memory.
template <typename T>
class Array {
public:
    Array(int size, T initValue);
    ~Array();
    Array(const Array<T>& other);
private:
    int size;
    T * p;
};
There are 2 attributes in class Array:
p: a pointer contains the address of first element of allocated memory.
size: number of elements of array.
Requirement: 
Implements the Copy Constructor method (highlighted in red), which initializes a new Array object based on other Array object.



*** Bai 5:

[English]
Given the following declaration: 
template < class T >
class Cell { 
       protected: 
           T info; 
       public: 
           void set(T x){ info = x; } 
           T get() { return info; } 
   }; 
enum Color {White, Yellow, Black, Red, Blue};

Define a class ColoredCell as a child of class Cell with:
1. A variable color.
2. Function setColor(Color ) to set a cell's color.
3. Function getColor() to return a cell's color.
4. Overload function get() to return the pointer to info if the cell's color is not white, else return NULL.


*** Bai 6:

[English]
Given the class definition:
class clockType
{
   public:
      void setTime(int, int, int);
      bool equalTime(const clockType&) const;
      clockType(int, int, int);
      clockType();
   private:
      int hr;
      int min;
      int sec;
};
Consider the commands:
if (myClock.equalTime(yourClock)) 
cout << "Both times are equal." << endl;
else 
cout << "The two times are not equal." << endl;
The if-else conditional expression compares myClock and yourClock object. If the time of 2 clocks including (hr, min, sec) is the same, return true, otherwise, return false.
Requirement: Student implements the equalTime method for it to do as described above.


*** Bai 7:

[English]

Given the class definition:
class Book {
public:
     Book(const char*);
     ~Book();
     void display();
private:
     char* name;
};
Implement Book's constructor and destructor so that the following program does not crash at runtime:
Book * pBook = new Book("To Kill a Mockingbird");
pBook->display();
delete pBook;
Output:
Book: To Kill a Mockingbird


*** Bai 8:

[English]

Given class template Array as below that contains an array allocated in Heap memory.
template <typename T>
class Array {
public:
    Array(int size, T initValue);
    ~Array();
    Array(const Array<T> & other); // Copy constructor
    Array<T> & operator=(const Array<T> & other); // Copy assignment operator
private:
    int size;
    T * p;
};
There are 2 attributes in class Array:
p: a pointer contains the address of first element of allocated memory.
size: number of elements of array.
Requirement: Implement following method:
Method Array(const Array<T> & other): copy constructor, initialize new object based on data of provided object. Also, print out the message: "Call copy constructor"
Method operator=: copy assignment operator, assigns the value of the current object's attributes to the value of the provided object. Print out the message: "Call assignment operator"


